{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","doItemsCollide","a","b","minRequiredDistance","size","Math","abs","x","y","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createFruit","setState","fruits","state","concat","age","fruitSize","random","width","height","checkAge","fruitMaxAge","tick","running","snakeDirection","snakeHead","snakeSegments","toConsumableArray","slice","activeFruits","filter","map","fruit","objectSpread","index","hasCollision","score","statusClass","setTimeout","selfCollision","over","console","log","togglePlay","snakeGrowth","snakeElSize","item","some","segment","_this2","_this3","setInterval","speed","document","addEventListener","event","key","react_default","createElement","className","onClick","cx","cy","r","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e8f3316.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction doItemsCollide(a, b) {\n    const minRequiredDistance = (a.size / 2) + (b.size / 2);\n\n    return Math.abs(a.x - b.x) < minRequiredDistance\n    && Math.abs(a.y - b.y) < minRequiredDistance;\n}\n\nclass App extends Component {\n    static defaultProps = {\n        width: 400,\n        height: 300,\n        snakeElSize: 15,\n        fruitSize: 25,\n        fruitMaxAge: 30,\n        speed: 150\n    }\n    constructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n            fruits: [],\n            running: true,\n            over: false,\n            snakeDirection: [0,-1],\n            snakeGrowth: 0,\n            score: 0,\n            statusClass: '',\n            snakeSegments: [\n                {\n                    size: this.props.snakeElSize,\n                    x: 100,\n                    y: 100\n                },\n                {\n                    size: this.props.snakeElSize,\n                    x: 100,\n                    y: 110\n                },\n                {\n                    size: this.props.snakeElSize,\n                    x: 100,\n                    y: 120\n                }\n            ]\n\t\t};\n\t}\n\n    hasCollision(item) {\n        return this.state.snakeSegments.some(segment => doItemsCollide(item, segment));\n    }\n\n    selfCollision() {\n        return this.state.snakeSegments.slice(1).some(segment => doItemsCollide(this.state.snakeSegments[0], segment));\n    }\n\n    componentDidMount(){\n        const tickInterval = setInterval(()=>{\n            this.tick();\n        },this.props.speed)\n\n        document.addEventListener('keydown', (event) => {\n            switch (event.key) {\n                case 'ArrowLeft':\n                    this.setState({\n                        snakeDirection: [-1,0]\n                    })\n                    break;\n                case 'ArrowRight':\n                    this.setState({\n                        snakeDirection: [1,0]\n                    })\n                    break;\n                case 'ArrowDown':\n                    this.setState({\n                        snakeDirection: [0,1]\n                    })\n                    break;\n                case 'ArrowUp':\n                    this.setState({\n                        snakeDirection: [0,-1]\n                    })\n                    break;\n                default:\n\n            }\n        });\n\n    }\n\n    createFruit = ()=>{\n        this.setState({\n            fruits: this.state.fruits.concat([\n                {\n                    age: 0,\n                    size: this.props.fruitSize,\n                    x: Math.random() * this.props.width,\n                    y: Math.random() * this.props.height\n                }\n            ])\n        })\n    }\n\n    checkAge = (age)=> {\n        return age < this.props.fruitMaxAge;\n    }\n\n    tick = ()=>{\n        if(!this.state.running){\n            return;\n        }\n        const snakeDirection = this.state.snakeDirection;\n        const snakeHead = this.state.snakeSegments[0];\n        this.setState({\n            snakeSegments: [\n                {\n                    size: snakeHead.size,\n                    x: (this.props.width + snakeHead.x + snakeHead.size * snakeDirection[0]) % this.props.width ,\n                    y: (this.props.height + snakeHead.y + snakeHead.size * snakeDirection[1]) % this.props.height\n                },\n                ...this.state.snakeSegments.slice(0,-1)\n            ]\n        })\n\n        //add fruits to game stage\n        if(Math.random() <= 0.1){\n            this.createFruit();\n        }\n\n        //check fruits age\n        const activeFruits = this.state.fruits.filter((fruits)=>{\n            return fruits.age < this.props.fruitMaxAge ;\n        })\n\n        //mature fruits\n        this.setState({\n            fruits: activeFruits.map(fruit => ({\n                ...fruit,\n                age: fruit.age + 1\n            }))\n        })\n\n        //check for collisions\n        this.state.fruits.map((fruit,index)=>{\n            if(this.hasCollision(fruit)){\n                fruit.age = 41;\n                const snakeDirection = this.state.snakeDirection;\n                const snakeHead = this.state.snakeSegments[0];\n                this.setState({\n                    score: this.state.score + 1,\n                    statusClass: 'scored',\n                    snakeSegments: [\n                        {\n                            size: snakeHead.size,\n                            x: (this.props.width + snakeHead.x + snakeHead.size * snakeDirection[0]) % this.props.width ,\n                            y: (this.props.height + snakeHead.y + snakeHead.size * snakeDirection[1]) % this.props.height\n                        },\n                        ...this.state.snakeSegments\n                    ]\n                })\n\n                setTimeout(()=>{\n                    this.setState({\n                        statusClass: ''\n                    })\n                },150)\n\n\n            }\n        })\n\n        //check for self collisions\n        if(this.selfCollision()){\n            this.setState({\n                running: false,\n                over: true\n            })\n            console.log('Game Over');\n        }\n\n\n    }\n\n    togglePlay = ()=>{\n        this.setState({\n            running: !this.state.running\n        })\n    }\n\n    render() {\n        return (\n          <div className=\"game\">\n            <header className=\"game__header\">\n              Score: {this.state.score} {this.state.over}\n\n              <i onClick={this.togglePlay} className={(this.state.running)? \"fas fa-pause-circle\" : \"fas fa-play-circle\" }></i>\n\n            </header>\n\n            <div className={\"game-stage \"+this.state.statusClass} >\n\n                <svg width={this.props.width} height={this.props.height}>\n                    <rect width={this.props.width} height={this.props.height} className=\"game-stage__body\"></rect>\n                    {this.state.snakeSegments.map((segment, index)=>{\n    \t\t\t\t\treturn(\n    \t\t\t\t\t\t<circle key={index} cx={segment.x} cy={segment.y} r={segment.size/2} className={\"snake__head snake__head--el\"+index}></circle>\n    \t\t\t\t\t)\n    \t\t\t\t})}\n                    {this.state.fruits.map((fruit, index)=>{\n    \t\t\t\t\treturn(\n    \t\t\t\t\t\t<circle key={index} cx={fruit.x} cy={fruit.y} r={fruit.size/2} className={\"fruit fruit--el\"+index}></circle>\n    \t\t\t\t\t)\n    \t\t\t\t})}\n\n                </svg>\n            </div>\n            <div  className={(!this.state.over)? \"game-over\" : \"game-over show\" }>\n                <h2>GAME OVER!</h2>\n                <h3>Final Score: {this.state.score}</h3>\n            </div>\n          </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}